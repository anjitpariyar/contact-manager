{"version":3,"sources":["component/AddPersonForm.jsx","component/PeopleList.jsx","App.js","serviceWorker.js","index.js"],"names":["AddPersonForm","props","person","handleChange","handleSubmit","onSubmit","type","placeholder","onChange","PeopleList","arr","data","deleteFunc","count","splice","listItems","map","val","index","key","value","onClick","width","height","viewBox","class","fill","xmlns","fill-rule","d","App","useState","contacts","setContacts","setPerson","parentIndex","setCount","className","e","target","preventDefault","alert","reset","parentName","parentNode","getAttribute","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAsBeA,G,KAlBM,SAAAC,GAE4BA,EAAtCC,OAFoB,IAEZC,EAA8BF,EAA9BE,aAAcC,EAAgBH,EAAhBG,aAI5B,OACK,0BAAMC,SAAUD,GACX,2BAAOE,KAAK,OACPC,YAAY,kBACZC,SAAUL,IAEf,4BAAQG,KAAK,UAAb,UCOAG,EArBI,SAAAR,GACd,IAAMS,EAAMT,EAAMU,KACZC,EAAqBX,EAArBW,WAAaC,EAAQZ,EAARY,MAGN,MAAPA,GACDH,EAAII,OAAOD,EAAO,GAIvB,IAAME,EAAYL,EAAIM,KAAK,SAACC,EAAKC,GAAN,OACtB,wBAAIC,IAAKD,EAAOE,MAAOF,GAClB,8BAAOA,EAAM,EAAb,UAAuBD,GACvB,4BAAQI,QAAST,GAAY,yBAAKU,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,MAAM,cAAcC,KAAK,eAAeC,MAAM,8BACxH,0BAAMC,YAAU,UAAUC,EAAE,qPAK3C,OAAO,4BAAKd,EAAL,MCgCGe,MAhDf,WAAgB,IAAD,EACmBC,mBAAS,CAAC,cAAe,kBAAmB,gBAD/D,mBACNC,EADM,KACIC,EADJ,OAEeF,mBAAS,IAFxB,mBAEN7B,EAFM,KAEEgC,EAFF,KAGTC,EAAa,KAHJ,EAIaJ,mBAAS,MAJtB,mBAINlB,EAJM,KAICuB,EAJD,KAuCb,OACE,yBAAKC,UAAU,OACb,8DACA,kBAAC,EAAD,CAAenC,OAAQA,EAAQC,aApCnC,SAAsBmC,GACpBF,EAAS,MACTF,EAAUI,EAAEC,OAAOnB,QAkC0ChB,aA/B/D,SAAsBkC,GACpBA,EAAEE,iBAECtC,GACH+B,EAAY,GAAD,mBAAKD,GAAL,CAAe9B,KAC1BkC,EAAS,OAIPK,MAAM,2BAGRH,EAAEC,OAAOG,WAoBP,kBAAC,EAAD,CAAY/B,KAAMqB,EAAUpB,WAbb,SAAC0B,GAClB,IAAIK,EAAaL,EAAEC,OAAOK,WACzBT,EAAcQ,EAAWE,aAAa,SACtCC,YAAW,WACTV,EAASD,KACR,MAQkDtB,MAAOA,MCpC7CkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.257342ff.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\n\r\nconst AddPersonForm= props => {\r\n     \r\n     let { person, handleChange, handleSubmit }= props;\r\n\r\n\r\n    \r\n     return (\r\n          <form onSubmit={handleSubmit}>\r\n               <input type=\"text\"\r\n                    placeholder=\"Add new contact\"\r\n                    onChange={handleChange}\r\n                     />\r\n               <button type=\"submit\">Add</button>\r\n          </form>\r\n\r\n     );\r\n}\r\n\r\nexport default AddPersonForm","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nconst PeopleList = props=> {\r\n     const arr = props.data;\r\n     let { deleteFunc , count}= props;\r\n\r\n     \r\n     if (!(count==null)){\r\n          arr.splice(count, 1);\r\n     }\r\n     else{\r\n     }\r\n     const listItems = arr.map( (val, index) =>\r\n          <li key={index} value={index}>\r\n               <span>{index+1}.      {val}</span> \r\n               <button onClick={deleteFunc}><svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-trash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fill-rule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\r\n               </svg></button>\r\n          \r\n          </li>\r\n     )\r\n     return <ol>{listItems} </ol>;\r\n}\r\nexport default PeopleList","import React, { useState } from 'react';\nimport AddPersonForm from './component/AddPersonForm'\nimport PeopleList from './component/PeopleList'\nimport './component/style.css';\n\nfunction App() {\n  const [contacts, setContacts] = useState([\"James Smith\", \"Thomas Anderson\", \"Bruce Wayne\"]);\n  const [person, setPerson] = useState(\"\");\n  let parentIndex= null;\n  const [count, setCount] = useState(null);\n\n  function handleChange(e) {\n    setCount(null)\n    setPerson(e.target.value);\n\n  }\n  function handleSubmit(e) {\n    e.preventDefault();\n    \n    if(person){\n    setContacts([...contacts, person]);\n    setCount(null)\n\n    }\n    else{\n      alert(\"contact cannot be empty\");\n    }\n\n    e.target.reset();\n    \n    // setPerson('');\n   \n  }\n \n\n  const deleteFunc = (e)=>{\n    let parentName = e.target.parentNode;\n     parentIndex = parentName.getAttribute('value');\n     setTimeout(() => {\n       setCount(parentIndex)\n     }, 200);\n     \n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Contact Manager From Sololearn</h1>\n      <AddPersonForm person={person} handleChange={handleChange} handleSubmit={handleSubmit} ></AddPersonForm>\n      <PeopleList data={contacts} deleteFunc={deleteFunc} count={count}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}